/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { replicaUUID_parameter } from '../models/replicaUUID_parameter';
import type { WebhookRequest } from '../models/WebhookRequest';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class InternalService {
    /**
     * Test chat completions
     *
     * Testing endpoint for evaluating RAG (Retrieval-Augmented Generation) quality. This endpoint allows to test how effectively the system retrieves relevant knowledge base entries and generates responses based on them. It returns not only the generated response but also the search queries used and the knowledge base entries that matched those queries. This is a simplified version that doesn't persist data to the database or chat history.
     *
     * Note: This endpoint is restricted to internal RAG workers and is not intended for general API users.
     *
     * @param replicaUuid
     * @param xApiVersion
     * @param requestBody
     * @returns any Test endpoint for RAG Worker to check RAG retrieval and generation quality
     * @throws ApiError
     */
    public static postV1ReplicasChatCompletionsTest(
        replicaUuid: replicaUUID_parameter,
        xApiVersion: string = '2025-03-25',
        requestBody?: {
            /**
             * The prompt to generate completions for, encoded as a string.
             */
            content: string;
            /**
             * When set to true, historical messages are not used in the context, and the message is not appended to the conversation history, thus it is excluded from all future chat context.
             */
            skip_chat_history?: boolean;
        },
    ): CancelablePromise<{
        /**
         * Indicates if the test chat completion was processed successfully
         */
        success: boolean;
        /**
         * The complete response text generated by the replica based on the retrieved knowledge base entries
         */
        content: string;
        /**
         * The search queries that were automatically generated to find relevant information in the knowledge base
         */
        queries: Array<string>;
        /**
         * The specific knowledge base entries that matched the queries and were used to generate the response
         */
        matches: Array<any>;
    }> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/replicas/{replicaUUID}/chat/completions/test',
            path: {
                'replicaUUID': replicaUuid,
            },
            headers: {
                'X-API-Version': xApiVersion,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Unauthorized`,
                404: `Not Found`,
                415: `Unsupported Media Type`,
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * @returns any Healthcheck response - all services healthy
     * @throws ApiError
     */
    public static getV1Healthcheck(): CancelablePromise<{
        /**
         * Indicates the status of the request
         */
        success: boolean;
        /**
         * Current timestamp
         */
        time: number;
        /**
         * Health status of external services
         */
        services: {
            supabase: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            qdrant: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            rabbitmq: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            vercel_kv: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            openai?: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            anthropic?: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            huggingface?: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            xai?: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            deepseek?: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            toolhouse?: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
            youtube?: {
                /**
                 * HTTP status code (200 for success, 500+ for error)
                 */
                status: number;
                /**
                 * Status message or error description
                 */
                message: string;
            };
        };
    }> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v1/healthcheck',
            errors: {
                400: `Bad Request`,
                401: `Unauthorized`,
                404: `Not Found`,
                415: `Unsupported Media Type`,
                500: `Healthcheck response - one or more services unhealthy`,
            },
        });
    }
    /**
     * Receive webhook notifications from the storage system
     * Processes file upload notifications from the storage system and queues them for processing.
     * @param requestBody
     * @returns any Success
     * @throws ApiError
     */
    public static postV1ReplicasTrainingFilesWebhook(
        requestBody?: WebhookRequest,
    ): CancelablePromise<{
        /**
         * Indicates if the webhook was processed successfully
         */
        success: boolean;
        /**
         * Optional message with details about the webhook processing
         */
        message?: string;
    }> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/replicas/training/files/webhook',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Unauthorized`,
                404: `Not Found`,
                415: `Unsupported Media Type`,
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * Receive webhook notifications from the storage system
     * Processes file upload notifications from the storage system and queues them for processing.
     * @param requestBody
     * @returns any Success
     * @throws ApiError
     */
    public static postV1WebhooksSupabaseKnowledgeBase(
        requestBody?: WebhookRequest,
    ): CancelablePromise<{
        /**
         * Indicates if the webhook was processed successfully
         */
        success: boolean;
        /**
         * Optional message with details about the webhook processing
         */
        message?: string;
    }> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/webhooks/supabase/knowledge-base',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Unauthorized`,
                404: `Not Found`,
                415: `Unsupported Media Type`,
                500: `Internal Server Error`,
            },
        });
    }
}
